{"id":"TxdA","dependencies":[{"name":"D:\\Projects\\ol\\package.json","includedInParent":true,"mtime":1586548571472},{"name":"D:\\Projects\\ol\\node_modules\\ol\\package.json","includedInParent":true,"mtime":1586157047249},{"name":"./math.js","loc":{"line":4,"column":37},"parent":"D:\\Projects\\ol\\node_modules\\ol\\sphere.js","resolved":"D:\\Projects\\ol\\node_modules\\ol\\math.js"},{"name":"./geom/GeometryType.js","loc":{"line":5,"column":25},"parent":"D:\\Projects\\ol\\node_modules\\ol\\sphere.js","resolved":"D:\\Projects\\ol\\node_modules\\ol\\geom\\GeometryType.js"}],"generated":{"js":"var $TxdA$exports={};$parcel$require(\"TxdA\",\"./math.js\"),$parcel$require(\"TxdA\",\"./geom/GeometryType.js\");var $TxdA$export$DEFAULT_RADIUS=6371008.8;function $TxdA$export$getDistance(e,t,r){var $=r||$TxdA$export$DEFAULT_RADIUS,a=$TxdA$import$toRadians(e[1]),o=$TxdA$import$toRadians(t[1]),T=(o-a)/2,n=$TxdA$import$toRadians(t[0]-e[0])/2,A=Math.sin(T)*Math.sin(T)+Math.sin(n)*Math.sin(n)*Math.cos(a)*Math.cos(o);return 2*$*Math.atan2(Math.sqrt(A),Math.sqrt(1-A))}function $TxdA$var$getLengthInternal(e,t){for(var r=0,$=0,a=e.length;$<a-1;++$)r+=$TxdA$export$getDistance(e[$],e[$+1],t);return r}function $TxdA$export$getLength(e,t){var r=t||{},$=r.radius||$TxdA$export$DEFAULT_RADIUS,a=r.projection||\"EPSG:3857\",o=e.getType();o!==$TxdA$import$GeometryType.GEOMETRY_COLLECTION&&(e=e.clone().transform(a,\"EPSG:4326\"));var T,n,A,x,p,s,d=0;switch(o){case $TxdA$import$GeometryType.POINT:case $TxdA$import$GeometryType.MULTI_POINT:break;case $TxdA$import$GeometryType.LINE_STRING:case $TxdA$import$GeometryType.LINEAR_RING:d=$TxdA$var$getLengthInternal(T=e.getCoordinates(),$);break;case $TxdA$import$GeometryType.MULTI_LINE_STRING:case $TxdA$import$GeometryType.POLYGON:for(A=0,x=(T=e.getCoordinates()).length;A<x;++A)d+=$TxdA$var$getLengthInternal(T[A],$);break;case $TxdA$import$GeometryType.MULTI_POLYGON:for(A=0,x=(T=e.getCoordinates()).length;A<x;++A)for(p=0,s=(n=T[A]).length;p<s;++p)d+=$TxdA$var$getLengthInternal(n[p],$);break;case $TxdA$import$GeometryType.GEOMETRY_COLLECTION:var i=e.getGeometries();for(A=0,x=i.length;A<x;++A)d+=$TxdA$export$getLength(i[A],t);break;default:throw new Error(\"Unsupported geometry type: \"+o)}return d}function $TxdA$var$getAreaInternal(e,t){for(var r=0,$=e.length,a=e[$-1][0],o=e[$-1][1],T=0;T<$;T++){var n=e[T][0],A=e[T][1];r+=$TxdA$import$toRadians(n-a)*(2+Math.sin($TxdA$import$toRadians(o))+Math.sin($TxdA$import$toRadians(A))),a=n,o=A}return r*t*t/2}function $TxdA$export$getArea(e,t){var r=t||{},$=r.radius||$TxdA$export$DEFAULT_RADIUS,a=r.projection||\"EPSG:3857\",o=e.getType();o!==$TxdA$import$GeometryType.GEOMETRY_COLLECTION&&(e=e.clone().transform(a,\"EPSG:4326\"));var T,n,A,x,p,s,d=0;switch(o){case $TxdA$import$GeometryType.POINT:case $TxdA$import$GeometryType.MULTI_POINT:case $TxdA$import$GeometryType.LINE_STRING:case $TxdA$import$GeometryType.MULTI_LINE_STRING:case $TxdA$import$GeometryType.LINEAR_RING:break;case $TxdA$import$GeometryType.POLYGON:for(T=e.getCoordinates(),d=Math.abs($TxdA$var$getAreaInternal(T[0],$)),A=1,x=T.length;A<x;++A)d-=Math.abs($TxdA$var$getAreaInternal(T[A],$));break;case $TxdA$import$GeometryType.MULTI_POLYGON:for(A=0,x=(T=e.getCoordinates()).length;A<x;++A)for(n=T[A],d+=Math.abs($TxdA$var$getAreaInternal(n[0],$)),p=1,s=n.length;p<s;++p)d-=Math.abs($TxdA$var$getAreaInternal(n[p],$));break;case $TxdA$import$GeometryType.GEOMETRY_COLLECTION:var i=e.getGeometries();for(A=0,x=i.length;A<x;++A)d+=$TxdA$export$getArea(i[A],t);break;default:throw new Error(\"Unsupported geometry type: \"+o)}return d}function $TxdA$export$offset(e,t,r,$){var a=$||$TxdA$export$DEFAULT_RADIUS,o=$TxdA$import$toRadians(e[1]),T=$TxdA$import$toRadians(e[0]),n=t/a,A=Math.asin(Math.sin(o)*Math.cos(n)+Math.cos(o)*Math.sin(n)*Math.cos(r)),x=T+Math.atan2(Math.sin(r)*Math.sin(n)*Math.cos(o),Math.cos(n)-Math.sin(o)*Math.sin(A));return[$TxdA$import$toDegrees(x),$TxdA$import$toDegrees(A)]}$TxdA$exports.DEFAULT_RADIUS=$TxdA$export$DEFAULT_RADIUS,$TxdA$exports.getDistance=$TxdA$export$getDistance,$TxdA$exports.getLength=$TxdA$export$getLength,$TxdA$exports.getArea=$TxdA$export$getArea,$TxdA$exports.offset=$TxdA$export$offset;"},"sourceMaps":null,"error":null,"hash":"5976e66d307327411be9cd60da28fe0e","cacheData":{"env":{},"imports":{"$TxdA$import$toRadians":["./math.js","toRadians"],"$TxdA$import$toDegrees":["./math.js","toDegrees"],"$TxdA$import$GeometryType":["./geom/GeometryType.js","default"]},"exports":{"DEFAULT_RADIUS":"$TxdA$export$DEFAULT_RADIUS","getDistance":"$TxdA$export$getDistance","getLength":"$TxdA$export$getLength","getArea":"$TxdA$export$getArea","offset":"$TxdA$export$offset"},"wildcards":[],"sideEffects":false,"isES6Module":true}}